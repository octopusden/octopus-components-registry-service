import com.platformlib.plugins.gradle.wrapper.task.DockerTask
import groovy.json.JsonOutput

buildscript {
    dependencies {
        classpath "com.avast.gradle:gradle-docker-compose-plugin:0.6.8"
    }
}

plugins {
    id 'io.github.gradle-nexus.publish-plugin'
    id 'org.octopusden.octopus-release-management'
    id 'org.springframework.boot'                 apply false
    id 'org.jetbrains.kotlin.jvm'                 apply false
    id 'org.jetbrains.kotlin.plugin.spring'       apply false
    id 'org.jetbrains.kotlin.plugin.jpa'          apply false
    id 'signing'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'com.platformlib.gradle-wrapper' version '0.2.6'
}

def adocProperties = [:]
['header', 'glossary-component-link', 'components-registry-link', 'release-management-automation-link',
 'escrow-automation-tool-link', 'service-desk-link', 'components-registry-validation-link'].each {
    (project.findProperty("adoc.$it") as String)?.with { property -> adocProperties[it] = property }
}

def checkMandatoryAdocProperties = {
    ['glossary-component-link', 'components-registry-link', 'release-management-automation-link',
     'escrow-automation-tool-link', 'service-desk-link', 'components-registry-validation-link'].each {
        if (adocProperties[it] == null) throw new IllegalArgumentException("`adoc.$it` property must be defined")
    }
    return
}

def wikiProperties = [:]
['url', 'username', 'password', 'space-key', 'page-id'].each {
    (project.findProperty("wiki.$it") as String)?.with { property -> wikiProperties[it] = property }
}

def checkMandatoryWikiProperties = {
    ['url', 'username', 'password', 'space-key', 'page-id'].each {
        if (wikiProperties[it] == null) throw new IllegalArgumentException("`wiki.$it` property must be defined")
    }
    return
}

asciidoctorj {
    attributes adocProperties
}

asciidoctor {
    sourceDir file('docs')
    sources {
        include 'configuration.adoc'
    }
    outputDir file('build/docs')
}

tasks.asciidoctor.doFirst {
    checkMandatoryAdocProperties.run()
}

tasks.register('adocPublishToWiki', DockerTask) {
    doFirst {
        if (project.findProperty('docker.registry') == null) throw new IllegalArgumentException("`docker.registry` property must be defined")
        checkMandatoryWikiProperties.run()
        checkMandatoryAdocProperties.run()
    }
    image = "${project.findProperty('docker.registry')}/confluencepublisher/confluence-publisher:0.14.0"
    dockerOptions = ['--network', 'host']
    bindMounts = ["${file('docs')}:/var/asciidoc-root-folder"]
    env = ["ROOT_CONFLUENCE_URL"    : wikiProperties['url'],
           "SKIP_SSL_VERIFICATION"  : "true",
           "MAX_REQUESTS_PER_SECOND": "10",
           "USERNAME"               : wikiProperties['username'],
           "PASSWORD"               : wikiProperties['password'],
           "SPACE_KEY"              : wikiProperties['space-key'],
           "ANCESTOR_ID"            : wikiProperties['page-id'],
           "PUBLISHING_STRATEGY"    : "REPLACE_ANCESTOR",
           "ORPHAN_REMOVAL_STRATEGY": "KEEP_ORPHANS",
           "ATTRIBUTES"             : JsonOutput.toJson(adocProperties),
           "NOTIFY_WATCHERS"        : "false",
           "CONVERT_ONLY"           : "false"
    ]
}

if (project.hasProperty("nexus")) {
    nexusPublishing {
        repositories {
            sonatype {
                nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
                snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
                username.set(System.getenv("MAVEN_USERNAME"))
                password.set(System.getenv("MAVEN_PASSWORD"))
            }
        }
    }
}

allprojects {
    group = 'org.octopusden.octopus.infrastructure'
}

subprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url = uri("https://repo.gradle.org/gradle/libs-releases-local")
        }
        maven {
            url = uri("https://oss.sonatype.org/content/repositories/releases/")
        }
    }
}

configure(subprojects) {
    apply plugin: 'signing'
    apply plugin: 'idea'
    apply plugin: 'java-library'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'maven-publish'

    dependencies {
        api "org.jetbrains.kotlin:kotlin-stdlib"
        implementation "org.jetbrains.kotlin:kotlin-reflect"
        implementation platform("com.fasterxml.jackson:jackson-bom:${project['jackson.version']}")
        testImplementation enforcedPlatform("org.junit:junit-bom:${project.'junit-jupiter.version'}")
        testImplementation "org.jetbrains.kotlin:kotlin-test-junit5"
        testImplementation "org.junit.jupiter:junit-jupiter-engine"
        testImplementation "org.junit.jupiter:junit-jupiter-params"
        testImplementation "junit:junit:4.12"
        testRuntimeOnly "org.junit.vintage:junit-vintage-engine"
    }

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    test {
        useJUnitPlatform()
        systemProperties = [
                //NOTE: when parallel.enabled = true EscrowConfigurationLoaderTest + BuildToolResolverTest
                // can fail sporadically on GH
            'junit.jupiter.execution.parallel.enabled': false
        ]
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                pom {
                    name.set(project.name)
                    description.set("Octopus module: ${project.name}")
                    url.set("https://github.com/octopusden/octopus-component-registry-service.git")
                    licenses {
                        license {
                            name.set("The Apache License, Version 2.0")
                            url.set("http://www.apache.org/licenses/LICENSE-2.0.txt")
                        }
                    }
                    scm {
                        url.set("https://github.com/octopusden/octopus-component-registry-service.git")
                        connection.set("scm:git://github.com/octopusden/octopus-component-registry-service.git")
                    }
                    developers {
                        developer {
                            id.set("octopus")
                            name.set("octopus")
                        }
                    }
                }
            }
        }
    }

    signing {
        required(gradle.taskGraph.hasTask("publishToSonatype"))
        sign(publishing.publications)
        def signingKey = findProperty("signingKey")
        def signingPassword = findProperty("signingPassword")
        useInMemoryPgpKeys(
                signingKey,
                signingPassword
        )
    }
}
