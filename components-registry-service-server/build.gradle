//noinspection GroovyAssignabilityCheck
plugins {
    id 'org.springframework.boot'
    id 'org.jetbrains.kotlin.plugin.spring'
    id 'java-test-fixtures'
    id 'com.bmuschko.docker-java-application'
}

apply plugin: 'docker-compose'

dependencies {
    implementation project(':component-resolver-core')
    implementation project(':components-registry-service-core')

    implementation platform("org.springframework.boot:spring-boot-dependencies:${project['spring-boot.version']}")
    implementation platform("org.springframework.cloud:spring-cloud-dependencies:${project.properties["spring-cloud.version"]}")

    implementation("org.springframework.cloud:spring-cloud-starter-config")
    implementation("org.springframework.cloud:spring-cloud-starter-bootstrap")
    implementation("org.springframework.retry:spring-retry")

    implementation("org.springframework.boot:spring-boot-starter-aop")
    implementation("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")

    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-devtools"
    implementation 'io.micrometer:micrometer-registry-prometheus:1.2.1'
    implementation "io.github.microutils:kotlin-logging:1.6.22"

    implementation("org.springdoc:springdoc-openapi-ui:1.6.7")

    implementation("org.eclipse.jgit:org.eclipse.jgit:5.13.0.202109080827-r")

    testImplementation "com.github.kittinunf.fuel:fuel:2.3.1"
    testImplementation group: 'org.skyscreamer', name: 'jsonassert', version: '1.5.0'
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation testFixtures(project(":test-common"))
}

sourceSets {
    test {
        resources {
            srcDirs += [ project(':test-common').sourceSets.test.resources ]
        }
    }
}

jar {
    baseName = "${project.name}-it"
    enabled = true
    archiveClassifier = ''
}

bootJar  {
    requiresUnpack '**/kotlin-compiler-*.jar'
}

springBoot {
    buildInfo()
}

def dockerRegistry = System.getenv().getOrDefault("DOCKER_REGISTRY", project.properties["docker.registry"])
def octopusGithubDockerRegistry = System.getenv().getOrDefault("OCTOPUS_GITHUB_DOCKER_REGISTRY", project.properties["octopus.github.docker.registry"])

dockerCreateDockerfile.doLast {
    copy {
        from 'Dockerfile'
        into dockerSyncBuildContext.destinationDir
    }
}

dockerBuildImage {
    inputDir = file(".")
    buildArgs.put("DOCKER_REGISTRY", "$dockerRegistry")
    buildArgs.put("BUILD_VERSION", "${project.version}")
    images.set(["$octopusGithubDockerRegistry/octopusden/components-registry-service:${project.version}"])
}
